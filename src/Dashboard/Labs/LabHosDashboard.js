import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { customStateMethods } from '../../StateMng/Slice/AuthSlice';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

export const LabHosDashboard = () => {
    const [totalBillCount, setTotalBillCount] = useState(0);
    const [totalRevenue, setTotalRevenue] = useState(0);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);
    const token = customStateMethods.selectStateKey('appState', 'token');

    useEffect(() => {
        fetchBillingCount();
        fetchTotalRevenue();
    }, [token]);

    const fetchBillingCount = async (startDate = null, endDate = null) => {
        setLoading(true);
        try {
            let url = '/api/report/lab/patient-billing';
            if (startDate && endDate) {
                url = '/api/report/lab/patient-billing/filter';
                url += `?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`;
            }

            const response = await axios.get(url, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (response.data.status === 200) {
                // Update this line to match the backend response
                setTotalBillCount(response.data.total);
            } else {
                setError(response.data.message || 'Failed to fetch billing count');
            }
        } catch (err) {
            console.error('Error fetching billing count:', err.response?.data || err.message);
            setError(err.response?.data?.message || 'An error occurred while fetching billing count');
        } finally {
            setLoading(false);
        }
    };

    const fetchTotalRevenue = async (startDate = null, endDate = null) => {
        setLoading(true);
        try {
            let url = '/api/report/lab/total-revenue';
            if (startDate && endDate) {
                url = '/api/report/lab/total-revenue/filter';
                url += `?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`;
            }

            const response = await axios.get(url, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (response.data.status === 200) {
                // Update this line to match the backend response
                const revenue = parseFloat(response.data.total) || 0;
                setTotalRevenue(revenue);
            } else {
                setError(response.data.message || 'Failed to fetch total revenue');
            }
        } catch (err) {
            console.error('Error fetching total revenue:', err.response?.data || err.message);
            setError(err.response?.data?.message || 'An error occurred while fetching total revenue');
        } finally {
            setLoading(false);
        }
    };

    const handleFilter = () => {
        if (startDate && endDate) {
            fetchBillingCount(startDate, endDate);
            fetchTotalRevenue(startDate, endDate);
        } else {
            setError('Please select both start and end dates.');
        }
    };

    if (loading) {
        return <div className="text-center mt-5">Loading...</div>;
    }

    if (error) {
        return <div className="alert alert-danger text-center mt-5">{error}</div>;
    }

    return (
        <div className="container mt-5">
            <div className="row mb-4">
            <h1 className="text-center mb-4">Lab || Hospital Dashboard Overview</h1>
                {/* Card for Total Billing Count */}
                <div className="col-lg-4">
                    <div className="card shadow-sm">
                        <div className="card-body text-center">
                            <h5 className="card-title text-primary">Total Billing Count</h5>
                            <p className="card-text display-4">{totalBillCount}</p>
                            <p className="text-muted">Total bills processed by the lab</p>
                        </div>
                    </div>
                </div>

                {/* Card for Total Revenue */}
                <div className="col-lg-4">
                    <div className="card shadow-sm">
                        <div className="card-body text-center">
                            <h5 className="card-title text-primary">Total Revenue Generated</h5>
                            <p className="card-text display-4">{(totalRevenue || 0).toFixed(2)}</p>
                            <p className="text-muted">Total revenue generated by the lab</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Date Filter Section */}
            <div className="row mb-4">
                <div className="col-lg-6">
                    <div className="card shadow-sm">
                        <div className="card-body">
                            <h5 className="card-title text-primary">Filter by Date Range</h5>
                            <div className="d-flex gap-3">
                                <div>
                                    <label>Start Date</label>
                                    <DatePicker
                                        selected={startDate}
                                        onChange={(date) => setStartDate(date)}
                                        selectsStart
                                        startDate={startDate}
                                        endDate={endDate}
                                        className="form-control"
                                    />
                                </div>
                                <div>
                                    <label>End Date</label>
                                    <DatePicker
                                        selected={endDate}
                                        onChange={(date) => setEndDate(date)}
                                        selectsEnd
                                        startDate={startDate}
                                        endDate={endDate}
                                        minDate={startDate}
                                        className="form-control"
                                    />
                                </div>
                                <button
                                    className="btn btn-primary align-self-end"
                                    onClick={handleFilter}
                                >
                                    Apply Filter
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};